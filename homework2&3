なぜ再ハッシュより木構造の方が良いか？

- 再ハッシュに毎回労力がかかる。木ならちょっとずらすだけでよい。
- しかもハッシュがいっぱいある
- Nを予想できないとなると最初からちょうどよいサイズのハッシュテーブルを作っておくこともできない。
- Nが大きくなるとハッシュテーブルの大きさとして使える素数の個数が減っていく。大きい数字の方が約数を持つ可能性が増え、素数の密度が小さいから。
- 最悪のケースのときハッシュはO(N)だけど木構造はO(logN)

宿題3

- キャッシュへアクセスし、追加削除もできる必要がある。
- キャッシュ自体をそれぞれハッシュ化する。
- 最近使った順にソートする？
- そうするとハッシュ値と利用された時間帯と2つの要素を持たせないといけないのでは？
